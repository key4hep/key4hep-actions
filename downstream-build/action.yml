name: 'Build downstream'
description: 'Build dependent packages and branches'
runs:
  using: "composite"
  steps:
    - name: Start container
      shell: bash
      run: |
        docker run -it --name container --privileged -v ${GITHUB_WORKSPACE}:/Package/main -d ghcr.io/key4hep/key4hep-images/alma9-cvmfs /bin/bash

    - shell: bash
      run: |
        echo $PWD
        ls -lah
        cat <<'EOF' > ${GITHUB_WORKSPACE}/script_container.sh
        /mount.sh
        cd ./Package

        source /cvmfs/sw-nightlies.hsf.org/key4hep/setup.sh
        rel=$(find /cvmfs/sw-nightlies.hsf.org/key4hep/releases/ -maxdepth 3 -type f -wholename "*almalinux9*/.scratch" | sort -r | head -1)
        rel=$(dirname $rel)
        echo "rel is $rel"

        git clone https://github.com/spack/spack --single-branch -q
        cd spack
        git checkout $(cat $rel/.spack-commit)
        source $rel/.cherry-pick
        cd ..

        source spack/share/spack/setup-env.sh

        git clone https://github.com/key4hep/key4hep-spack --single-branch -q
        cd key4hep-spack
        git checkout $(cat $rel/.key4hep-spack-commit)
        spack env activate environments/key4hep-nightly-opt
        cd ..

        name=$(echo "${{ github.event.repository.name }}" | tr "[:upper:]" "[:lower:]")
        echo $name

        git clone https://github.com/key4hep/key4hep-dev-utils --depth 1 -q
        latest_rel=$(find /cvmfs/sw-nightlies.hsf.org/key4hep/releases/ -maxdepth 3 -type f -wholename "*almalinux9*/.spack-commit" | sort -r | head -1)
        latest_rel=$(dirname $latest_rel)
        if [ "$rel" != "$latest_rel" ]; then \
          spack config add "upstreams:nightly_latest:install_tree: $latest_rel"
        fi
        spack config add "upstreams:nightly:install_tree: $rel"
        mkdir /Workarea
        cd /Workarea
        git log

        # Exit now if there is any command that fails
        # set -e

        # If there aren't any packages leave
        if [ -z "$(ls /Workarea)" ]; then
            echo "No packages depend on this one, exiting"
            exit 0
        fi

        for package in $(ls)
        do
            paths="/${package:3}/|$paths"
        done
        paths="$paths/$name/"

        for v in PATH LD_LIBRARY_PATH PYTHONPATH ROOT_INCLUDE_PATH CMAKE_PREFIX_PATH
        do
            export $v=$(eval echo \$$v | tr ":" "\n" | grep -Ev "${paths}" | tr "\n" ":")
            # echo $v is ${!v}
        done

        cd /Package/main
        mkdir build
        cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 -DBUILD_TESTING=OFF -G Ninja
        ninja && ninja install > /dev/null
        # Do not run the tests, this is already done in other CI workflows
        # ctest -j $(nproc) --output-on-failure
        cd ../install
        export PATH=$PWD/bin:$PATH
        export LD_LIBRARY_PATH=$PWD/lib:$PWD/lib64:$LD_LIBRARY_PATH
        export ROOT_INCLUDE_PATH=$PWD/include:$ROOT_INCLUDE_PATH
        export PYTHONPATH=$PWD/python:$PYTHONPATH
        export CMAKE_PREFIX_PATH=$PWD:$CMAKE_PREFIX_PATH

        cd /Workarea
        for package in $(ls)
        do
            cd $package
            mkdir build
            cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=20 -G Ninja
            ninja && ninja install > /dev/null
            ctest -j $(nproc) --output-on-failure
            cd ../install
            export PATH=$PWD/bin:$PATH
            export LD_LIBRARY_PATH=$PWD/lib:$PWD/lib64:$LD_LIBRARY_PATH
            export ROOT_INCLUDE_PATH=$PWD/include:$ROOT_INCLUDE_PATH
            export PYTHONPATH=$PWD/python:$PYTHONPATH
            export CMAKE_PREFIX_PATH=$PWD:$CMAKE_PREFIX_PATH
            cd ../..
        done

        EOF

        cat ${GITHUB_WORKSPACE}/script_container.sh

        docker exec container /bin/bash /Package/main/script_container.sh
